{"version":3,"sources":["routes/Router.js","App.js","reportWebVitals.js","layouts/loader/Loader.js","index.js"],"names":["FullLayout","lazy","Monsters","Monster","Spells","Spell","ThemeRoutes","path","element","children","to","exact","App","routing","useRoutes","Themeroutes","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Loader","color","ReactDOM","render","fallback","document","getElementById"],"mappings":"mNAIMA,EAAaC,gBAAK,kBAAM,iCAIxBC,EAAWD,gBAAK,kBAAM,8DACtBE,EAAUF,gBAAK,kBAAM,uDACrBG,EAASH,gBAAK,kBAAM,+DACpBI,EAAQJ,gBAAK,kBAAM,uDAkBVK,EAdK,CAChB,CACIC,KAAM,IACNC,QAAS,cAACR,EAAD,IACTS,SAAU,CACN,CAACF,KAAM,IAAKC,QAAS,cAAC,IAAD,CAAUE,GAAG,aAClC,CAACH,KAAM,YAAaI,OAAO,EAAMH,QAAS,cAACN,EAAD,KAC1C,CAACK,KAAM,kBAAmBI,OAAO,EAAMH,QAAS,cAACL,EAAD,KAChD,CAACI,KAAM,UAAWI,OAAO,EAAMH,QAAS,cAACJ,EAAD,KACxC,CAACG,KAAM,gBAAiBI,OAAO,EAAMH,QAAS,cAACH,EAAD,QCf3CO,EANH,WACR,IAAMC,EAAUC,YAAUC,GAE1B,OAAO,qBAAKC,UAAU,OAAf,SAAuBH,KCMnBI,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,+BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACxDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCILQ,EAPA,kBACX,qBAAKV,UAAU,mBAAf,SACI,qBAAKA,UAAU,UAAf,SACI,cAAC,IAAD,CAASW,MAAM,iBCC3BC,IAASC,OACL,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACI,cAAC,IAAD,UACI,cAAC,EAAD,QAIRC,SAASC,eAAe,SAM5Bf,M","file":"static/js/main.484b4511.chunk.js","sourcesContent":["import {lazy} from \"react\";\nimport {Navigate} from \"react-router-dom\";\n\n/****Layouts*****/\nconst FullLayout = lazy(() => import(\"../layouts/FullLayout.js\"));\n\n/***** Pages ****/\n\nconst Monsters = lazy(() => import(\"../views/ui/Monsters\"));\nconst Monster = lazy(() => import(\"../views/ui/Monster\"));\nconst Spells = lazy(() => import(\"../views/ui/Spells\"));\nconst Spell = lazy(() => import(\"../views/ui/Spell\"));\n\n/*****Routes******/\n\nconst ThemeRoutes = [\n    {\n        path: \"/\",\n        element: <FullLayout/>,\n        children: [\n            {path: \"/\", element: <Navigate to=\"/spells\"/>},\n            {path: \"/monsters\", exact: true, element: <Monsters/>},\n            {path: \"/monsters/:name\", exact: true, element: <Monster/>},\n            {path: \"/spells\", exact: true, element: <Spells/>},\n            {path: \"/spells/:name\", exact: true, element: <Spell/>},\n        ],\n    },\n];\n\nexport default ThemeRoutes;","import {useRoutes} from \"react-router-dom\";\nimport Themeroutes from \"./routes/Router\";\n\nconst App = () => {\n    const routing = useRoutes(Themeroutes);\n\n    return <div className=\"dark\">{routing}</div>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport \"./loader.scss\";\nimport {Spinner} from \"reactstrap\";\n\nconst Loader = () => (\n    <div className=\"fallback-spinner\">\n        <div className=\"loading\">\n            <Spinner color=\"primary\"/>\n        </div>\n    </div>\n);\nexport default Loader;\n","import React, {Suspense} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/scss/style.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {HashRouter} from \"react-router-dom\";\nimport Loader from \"./layouts/loader/Loader\";\n\nReactDOM.render(\n    <Suspense fallback={<Loader/>}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Suspense>,\n\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}